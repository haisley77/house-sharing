pipeline {
    agent any
    tools {
        gradle 'gradle'
    }
    environment {
        // 환경 변수를 선언하고 초기화
        imageName = "norutnt/develop"
        registryCredential = "tfeo-docker"
        dockerImage = ''

        releaseServerAccount = 'ubuntu'
        releaseServerUri = 'j10a707.p.ssafy.io'
        releasePort = '8081'
    }
    post {
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
        }

        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
    }

    stages {
        stage('Get Merge Request and preBuildMerge') {
            steps {
                cleanWs()
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "origin/${env.gitlabSourceBranch}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'PreBuildMerge', options: [mergeRemote: 'origin', mergeTarget: "${env.gitlabTargetBranch}"]]],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'gitlab_access_token', url: 'https://lab.ssafy.com/s10-bigdata-recom-sub2/S10P22A707.git']]
                    ])
                }

            }
        }

        stage('Run Container') {
            steps {
                dir('exec/docker') {
                    sh 'docker-compose -f docker-compose.yml up -d'
                }
            }
        }

        stage('Setup build environment') {
            steps {
                script {
                        sh 'rm -rf backend/env'
                        sh 'mkdir -p backend/env'
                        sh "chown -R jenkins:jenkins backend/env"
                        sh "chmod -R 755 backend/env"
                }


                withCredentials([file(credentialsId: 'db', variable: 'dbFile')]) {
                    script {
                        sh 'cp $dbFile backend/env/db.env'
                    }
                }


                withCredentials([file(credentialsId: 'test-db', variable: 'testdbFile')]) {
                    script {
                        sh 'cp $testdbFile backend/env/test-db.env'
                    }
                }
                withCredentials([file(credentialsId: 'security', variable: 'securityFile')]) {
                    script {
                        sh 'cp $securityFile backend/env/security.env'
                    }
                }

            }
        }

        stage('Build') {
            steps {
                echo 'Building...'
                 // 빌드 실행
                 dir('backend') {
                    // backend 디렉토리 안에서 빌드 실행
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean bootJar'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Test...'
                // 테스트 실행
                dir('backend') {
                    // backend 디렉토리 안에서 빌드 실행
                    sh './gradlew test'
                }
            }
        }

        stage('Image Build & DockerHub Push') {
            steps {
                dir('backend') {
                    script {
                        docker.withRegistry('', registryCredential) {
                            // 이미지 빌드
                            sh "docker build -t $imageName:$BUILD_NUMBER ."
                            sh "docker build -t $imageName:latest ."

                            // Docker Hub에 푸시
                            sh "docker push $imageName:$BUILD_NUMBER"
                            sh "docker push $imageName:latest"
                        }
                    }
                }
            }
        }

        stage('Before Service Stop') {
            steps {
                sshagent(credentials: ['ubuntu']) {
                    sh '''
                    containers=$(ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "docker ps -aq --filter ancestor=$imageName:latest")
                    if [ ! -z "$containers" ]; then
                        ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "docker stop $containers"
                        ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "docker rm -f $containers"
                        ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "docker rmi $imageName:latest"
                    fi
                    '''
                }
            }
        }

        stage('DockerHub Pull') {
            steps {
                sshagent(credentials: ['ubuntu']) {
                    sh "ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri 'sudo docker pull $imageName:latest'"
                }
            }
        }

        stage('Service Start') {
            steps {
                sshagent(credentials: ['ubuntu']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri "sudo docker run -i -e TZ=Asia/Seoul -e "SPRING_PROFILES_ACTIVE=set1" --name back --network tfeo-network -p $releasePort:$releasePort -d $imageName:latest"
                    '''
                }
            }
        }



    }
}