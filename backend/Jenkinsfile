pipeline {
    agent any
    tools {
        gradle 'gradle'
    }
    environment {
        // 환경 변수를 선언하고 초기화
        imageName = "norutnt/develop"
        registryCredential = "tfeo-docker"
        dockerImage = ''
        GITLAB_SOURCE_BRANCH = "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        GITLAB_TARGET_BRANCH = "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    }
    post {
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
        }

        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
    }

    stages {
        stage('Get Merge Request and preBuildMerge') {
            steps {
                cleanWs()
//                 script {
//                     echo "The GitLab source branch is: ${GITLAB_SOURCE_BRANCH}"
//                     echo "The GitLab target branch is: ${GITLAB_TARGET_BRANCH}"
//                     checkout([
//                         $class: 'GitSCM',
//                         branches: [[name: "origin/${GITLAB_SOURCE_BRANCH}"]],
//                         doGenerateSubmoduleConfigurations: false,
//                         extensions: [[$class: 'PreBuildMerge', options: [mergeRemote: 'origin', mergeTarget: "${GITLAB_TARGET_BRANCH}"]]],
//                         submoduleCfg: [],
//                         userRemoteConfigs: [[credentialsId: 'gitlab_access_token', url: 'https://lab.ssafy.com/s10-bigdata-recom-sub2/S10P22A707.git']]
//                     ])
//                 }
                checkout scm
            }
        }

        stage('Run Container') {
            steps {
                dir('exec/docker') {
                    sh 'docker-compose -f docker-compose.yml up -d'
                }
            }
        }

        stage('Setup build environment') {
            steps {
                script {
                        sh 'rm -rf backend/env'
                        sh 'mkdir -p backend/env'
                        sh "chown -R jenkins:jenkins backend/env"
                        sh "chmod -R 755 backend/env"
                }


                withCredentials([file(credentialsId: 'db', variable: 'dbFile')]) {
                    script {
                        sh 'cp $dbFile backend/env/db.env'
                    }
                }


                withCredentials([file(credentialsId: 'test-db', variable: 'testdbFile')]) {
                    script {
                        sh 'cp $testdbFile backend/env/test-db.env'
                    }
                }
                withCredentials([file(credentialsId: 'security', variable: 'securityFile')]) {
                    script {
                        sh 'cp $securityFile backend/env/security.env'
                    }
                }

            }
        }

        stage('Build') {
            steps {
                echo 'Building...'
                 // 빌드 실행
                 dir('backend') {
                    // backend 디렉토리 안에서 빌드 실행
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean bootJar'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Test...'
                // 테스트 실행
                dir('backend') {
                    // backend 디렉토리 안에서 빌드 실행
                    sh './gradlew test'
                }
            }
        }
        stage('Image Build & DockerHub Push') {
            steps {
                dir('Backend') {
                    script {
                        docker.withRegistry('', registryCredential) {
                            sh "docker buildx create --name mybuilder"
                            sh "docker buildx use mybuilder"
                            sh "docker buildx build --platform linux/amd64,linux/arm64 -t $imageName:$BUILD_NUMBER --push ."
                            sh "docker buildx build --platform linux/amd64,linux/arm64 -t $imageName:latest --push ."
                        }
                    }
                }
            }
        }


    }
}